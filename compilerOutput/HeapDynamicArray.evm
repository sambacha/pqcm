    /* "contracts/queue/HeapDynamicArray.sol":167:11265  contract HeapDynamicArray {... */
  mstore(0x40, 0x80)
  callvalue
    /* "--CODEGEN--":8:17   */
  dup1
    /* "--CODEGEN--":5:7   */
  iszero
  tag_1
  jumpi
    /* "--CODEGEN--":30:31   */
  0x00
    /* "--CODEGEN--":27:28   */
  dup1
    /* "--CODEGEN--":20:32   */
  revert
    /* "--CODEGEN--":5:7   */
tag_1:
    /* "contracts/queue/HeapDynamicArray.sol":167:11265  contract HeapDynamicArray {... */
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "contracts/queue/HeapDynamicArray.sol":167:11265  contract HeapDynamicArray {... */
      mstore(0x40, 0x80)
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
        /* "contracts/queue/HeapDynamicArray.sol":167:11265  contract HeapDynamicArray {... */
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x91447d32
      gt
      tag_11
      jumpi
      dup1
      0x91447d32
      eq
      tag_7
      jumpi
      dup1
      0x9484d404
      eq
      tag_8
      jumpi
      dup1
      0xa78b7907
      eq
      tag_9
      jumpi
      dup1
      0xcc0ba670
      eq
      tag_10
      jumpi
      jump(tag_2)
    tag_11:
      dup1
      0x1b44d8d0
      eq
      tag_3
      jumpi
      dup1
      0x211b0d3c
      eq
      tag_4
      jumpi
      dup1
      0x502f8609
      eq
      tag_5
      jumpi
      dup1
      0x8a07bb65
      eq
      tag_6
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "contracts/queue/HeapDynamicArray.sol":2702:3584  function buyListMaxDelete()... */
    tag_3:
      tag_12
      tag_13
      jump	// in
    tag_12:
      mload(0x40)
      dup1
      dup5
      dup2
      mstore
      0x20
      add
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      dup3
      dup2
      mstore
      0x20
      add
      swap4
      pop
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":5666:5841  function buyListisEmpty() external view returns (bool) {... */
    tag_4:
      tag_14
      tag_15
      jump	// in
    tag_14:
      mload(0x40)
      dup1
      dup3
      iszero
      iszero
      iszero
      iszero
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":1113:1407  function insertBid(... */
    tag_5:
      tag_16
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:16   */
      0x80
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:17   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_17
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_17:
        /* "contracts/queue/HeapDynamicArray.sol":1113:1407  function insertBid(... */
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      0xffffffffffffffffffffffffffffffffffffffff
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_18
      jump	// in
    tag_16:
      stop
        /* "contracts/queue/HeapDynamicArray.sol":8919:9253  function sellListMax()... */
    tag_6:
      tag_19
      tag_20
      jump	// in
    tag_19:
      mload(0x40)
      dup1
      dup5
      dup2
      mstore
      0x20
      add
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      dup3
      dup2
      mstore
      0x20
      add
      swap4
      pop
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":7826:8716  function sellListMaxDelete()... */
    tag_7:
      tag_21
      tag_22
      jump	// in
    tag_21:
      mload(0x40)
      dup1
      dup5
      dup2
      mstore
      0x20
      add
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      dup3
      dup2
      mstore
      0x20
      add
      swap4
      pop
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":3708:4042  function buyListMax()... */
    tag_8:
      tag_23
      tag_24
      jump	// in
    tag_23:
      mload(0x40)
      dup1
      dup5
      dup2
      mstore
      0x20
      add
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      dup3
      dup2
      mstore
      0x20
      add
      swap4
      pop
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":6044:6339  function insertAsk(... */
    tag_9:
      tag_25
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:16   */
      0x80
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:17   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_26
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_26:
        /* "contracts/queue/HeapDynamicArray.sol":6044:6339  function insertAsk(... */
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      0xffffffffffffffffffffffffffffffffffffffff
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_27
      jump	// in
    tag_25:
      stop
        /* "contracts/queue/HeapDynamicArray.sol":11086:11263  function sellListisEmpty() external view returns (bool) {... */
    tag_10:
      tag_28
      tag_29
      jump	// in
    tag_28:
      mload(0x40)
      dup1
      dup3
      iszero
      iszero
      iszero
      iszero
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "contracts/queue/HeapDynamicArray.sol":2702:3584  function buyListMaxDelete()... */
    tag_13:
        /* "contracts/queue/HeapDynamicArray.sol":2777:2784  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2798:2805  address */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":2819:2826  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2877:2878  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":2859:2866  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2859:2873  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2859:2878  buyList.length != 0 */
      eq
      iszero
        /* "contracts/queue/HeapDynamicArray.sol":2851:2900  require(buyList.length != 0, "buyList is empty!") */
      tag_31
      jumpi
      mload(0x40)
      0x08c379a000000000000000000000000000000000000000000000000000000000
      dup2
      mstore
      0x04
      add
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      0x11
      dup2
      mstore
      0x20
      add
      dup1
      0x6275794c69737420697320656d70747921000000000000000000000000000000
      dup2
      mstore
      pop
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      revert
    tag_31:
        /* "contracts/queue/HeapDynamicArray.sol":2977:2978  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":2959:2966  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2959:2973  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2959:2978  buyList.length == 1 */
      eq
        /* "contracts/queue/HeapDynamicArray.sol":2955:3210  if (buyList.length == 1) {... */
      iszero
      tag_32
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":2994:3008  uint256 _price */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3011:3018  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3019:3020  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3011:3021  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_33
      jumpi
      invalid
    tag_33:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3011:3027  buyList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":2994:3027  uint256 _price = buyList[0].Price */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3041:3056  address _sender */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3059:3066  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3067:3068  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3059:3069  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_35
      jumpi
      invalid
    tag_35:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3059:3076  buyList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":3041:3076  address _sender = buyList[0].Sender */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3090:3105  uint256 _volume */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3108:3115  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3116:3117  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3108:3118  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_37
      jumpi
      invalid
    tag_37:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3108:3125  buyList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":3090:3125  uint256 _volume = buyList[0].Volume */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3139:3146  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3139:3152  buyList.pop() */
      dup1
      sload
      dup1
      tag_39
      jumpi
      invalid
    tag_39:
      0x01
      swap1
      sub
      dup2
      dup2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      dup1
      dup3
      add
      exp(0x0100, 0x00)
      dup2
      sload
      swap1
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      sstore
      0x01
      dup3
      add
      0x00
      swap1
      sstore
      0x02
      dup3
      add
      0x00
      swap1
      sstore
      0x03
      dup3
      add
      0x00
      swap1
      sstore
      pop
      pop
      swap1
      sstore
        /* "contracts/queue/HeapDynamicArray.sol":3174:3180  _price */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3182:3189  _sender */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3191:3198  _volume */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3166:3199  return (_price, _sender, _volume) */
      swap6
      pop
      swap6
      pop
      swap6
      pop
      pop
      pop
      pop
      jump(tag_30)
        /* "contracts/queue/HeapDynamicArray.sol":2955:3210  if (buyList.length == 1) {... */
    tag_32:
        /* "contracts/queue/HeapDynamicArray.sol":3220:3234  uint256 _price */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3237:3244  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3245:3246  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3237:3247  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_41
      jumpi
      invalid
    tag_41:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3237:3253  buyList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":3220:3253  uint256 _price = buyList[0].Price */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3263:3278  address _sender */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3281:3288  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3289:3290  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3281:3291  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_43
      jumpi
      invalid
    tag_43:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3281:3298  buyList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":3263:3298  address _sender = buyList[0].Sender */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3308:3323  uint256 _volume */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3326:3333  buyList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3334:3335  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3326:3336  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_45
      jumpi
      invalid
    tag_45:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3326:3343  buyList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":3308:3343  uint256 _volume = buyList[0].Volume */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3454:3461  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3479:3480  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":3462:3469  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3462:3476  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3462:3480  buyList.length - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":3454:3481  buyList[buyList.length - 1] */
      dup2
      sload
      dup2
      lt
      tag_47
      jumpi
      invalid
    tag_47:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3441:3448  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3449:3450  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3441:3451  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_49
      jumpi
      invalid
    tag_49:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3441:3481  buyList[0] = buyList[buyList.length - 1] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3491:3498  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3491:3504  buyList.pop() */
      dup1
      sload
      dup1
      tag_51
      jumpi
      invalid
    tag_51:
      0x01
      swap1
      sub
      dup2
      dup2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      dup1
      dup3
      add
      exp(0x0100, 0x00)
      dup2
      sload
      swap1
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      sstore
      0x01
      dup3
      add
      0x00
      swap1
      sstore
      0x02
      dup3
      add
      0x00
      swap1
      sstore
      0x03
      dup3
      add
      0x00
      swap1
      sstore
      pop
      pop
      swap1
      sstore
        /* "contracts/queue/HeapDynamicArray.sol":3514:3534  maxheapHeapifyDown() */
      tag_53
        /* "contracts/queue/HeapDynamicArray.sol":3514:3532  maxheapHeapifyDown */
      tag_54
        /* "contracts/queue/HeapDynamicArray.sol":3514:3534  maxheapHeapifyDown() */
      jump	// in
    tag_53:
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3552:3558  _price */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3560:3567  _sender */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3569:3576  _volume */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":3544:3577  return (_price, _sender, _volume) */
      swap6
      pop
      swap6
      pop
      swap6
      pop
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2702:3584  function buyListMaxDelete()... */
    tag_30:
      swap1
      swap2
      swap3
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":5666:5841  function buyListisEmpty() external view returns (bool) {... */
    tag_15:
        /* "contracts/queue/HeapDynamicArray.sol":5715:5719  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5753:5754  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":5735:5742  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5735:5749  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5735:5754  buyList.length == 0 */
      eq
        /* "contracts/queue/HeapDynamicArray.sol":5731:5835  if (buyList.length == 0) {... */
      iszero
      tag_56
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":5777:5781  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":5770:5781  return true */
      swap1
      pop
      jump(tag_55)
        /* "contracts/queue/HeapDynamicArray.sol":5731:5835  if (buyList.length == 0) {... */
    tag_56:
        /* "contracts/queue/HeapDynamicArray.sol":5819:5824  false */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5812:5824  return false */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5666:5841  function buyListisEmpty() external view returns (bool) {... */
    tag_55:
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":1113:1407  function insertBid(... */
    tag_18:
        /* "contracts/queue/HeapDynamicArray.sol":1254:1281  OrderStruct memory neworder */
      tag_59
      tag_60
      jump	// in
    tag_59:
        /* "contracts/queue/HeapDynamicArray.sol":1296:1340  OrderStruct(sender, price, volume, auxprice) */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":1308:1314  sender */
      dup7
        /* "contracts/queue/HeapDynamicArray.sol":1296:1340  OrderStruct(sender, price, volume, auxprice) */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":1316:1321  price */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":1296:1340  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":1323:1329  volume */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":1296:1340  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":1331:1339  auxprice */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":1296:1340  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1254:1340  OrderStruct memory neworder =... */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1350:1357  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1363:1371  neworder */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":1350:1372  buyList.push(neworder) */
      swap1
      dup1
        /* "--CODEGEN--":39:40   */
      0x01
        /* "--CODEGEN--":33:36   */
      dup2
        /* "--CODEGEN--":27:37   */
      sload
        /* "--CODEGEN--":23:41   */
      add
        /* "--CODEGEN--":57:67   */
      dup1
        /* "--CODEGEN--":52:55   */
      dup3
        /* "--CODEGEN--":45:68   */
      sstore
        /* "--CODEGEN--":79:89   */
      dup1
        /* "--CODEGEN--":72:89   */
      swap2
      pop
        /* "--CODEGEN--":0:93   */
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1350:1372  buyList.push(neworder) */
      swap1
      0x01
      dup3
      sub
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      swap1
      swap2
      swap3
      swap1
      swap2
      swap1
      swap2
      pop
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1382:1400  maxheapHeapifyUp() */
      tag_62
        /* "contracts/queue/HeapDynamicArray.sol":1382:1398  maxheapHeapifyUp */
      tag_63
        /* "contracts/queue/HeapDynamicArray.sol":1382:1400  maxheapHeapifyUp() */
      jump	// in
    tag_62:
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1113:1407  function insertBid(... */
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":8919:9253  function sellListMax()... */
    tag_20:
        /* "contracts/queue/HeapDynamicArray.sol":9002:9009  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9023:9030  address */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":9044:9051  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9103:9104  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":9084:9092  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9084:9099  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9084:9104  sellList.length != 0 */
      eq
      iszero
        /* "contracts/queue/HeapDynamicArray.sol":9076:9127  require(sellList.length != 0, "sellList is empty!") */
      tag_65
      jumpi
      mload(0x40)
      0x08c379a000000000000000000000000000000000000000000000000000000000
      dup2
      mstore
      0x04
      add
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      0x12
      dup2
      mstore
      0x20
      add
      dup1
      0x73656c6c4c69737420697320656d707479210000000000000000000000000000
      dup2
      mstore
      pop
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      revert
    tag_65:
        /* "contracts/queue/HeapDynamicArray.sol":9188:9196  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9197:9198  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9188:9199  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_66
      jumpi
      invalid
    tag_66:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":9188:9205  sellList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":9207:9215  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9216:9217  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9207:9218  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_68
      jumpi
      invalid
    tag_68:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":9207:9225  sellList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":9227:9235  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9236:9237  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9227:9238  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_70
      jumpi
      invalid
    tag_70:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":9227:9245  sellList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":9180:9246  return (sellList[0].Price, sellList[0].Sender, sellList[0].Volume) */
      swap3
      pop
      swap3
      pop
      swap3
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8919:9253  function sellListMax()... */
      swap1
      swap2
      swap3
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":7826:8716  function sellListMaxDelete()... */
    tag_22:
        /* "contracts/queue/HeapDynamicArray.sol":7902:7909  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":7923:7930  address */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":7944:7951  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8003:8004  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":7984:7992  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7984:7999  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7984:8004  sellList.length != 0 */
      eq
      iszero
        /* "contracts/queue/HeapDynamicArray.sol":7976:8027  require(sellList.length != 0, "sellList is empty!") */
      tag_73
      jumpi
      mload(0x40)
      0x08c379a000000000000000000000000000000000000000000000000000000000
      dup2
      mstore
      0x04
      add
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      0x12
      dup2
      mstore
      0x20
      add
      dup1
      0x73656c6c4c69737420697320656d707479210000000000000000000000000000
      dup2
      mstore
      pop
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      revert
    tag_73:
        /* "contracts/queue/HeapDynamicArray.sol":8101:8102  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8082:8090  sellList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":8082:8097  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8082:8102  sellList.length == 1 */
      eq
        /* "contracts/queue/HeapDynamicArray.sol":8078:8338  if (sellList.length == 1) {... */
      iszero
      tag_74
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":8118:8132  uint256 _price */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8135:8143  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8144:8145  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8135:8146  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_75
      jumpi
      invalid
    tag_75:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8135:8152  sellList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":8118:8152  uint256 _price = sellList[0].Price */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8166:8181  address _sender */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8184:8192  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8193:8194  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8184:8195  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_77
      jumpi
      invalid
    tag_77:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8184:8202  sellList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":8166:8202  address _sender = sellList[0].Sender */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8216:8231  uint256 _volume */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8234:8242  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8243:8244  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8234:8245  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_79
      jumpi
      invalid
    tag_79:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8234:8252  sellList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":8216:8252  uint256 _volume = sellList[0].Volume */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8266:8274  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8266:8280  sellList.pop() */
      dup1
      sload
      dup1
      tag_81
      jumpi
      invalid
    tag_81:
      0x01
      swap1
      sub
      dup2
      dup2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      dup1
      dup3
      add
      exp(0x0100, 0x00)
      dup2
      sload
      swap1
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      sstore
      0x01
      dup3
      add
      0x00
      swap1
      sstore
      0x02
      dup3
      add
      0x00
      swap1
      sstore
      0x03
      dup3
      add
      0x00
      swap1
      sstore
      pop
      pop
      swap1
      sstore
        /* "contracts/queue/HeapDynamicArray.sol":8302:8308  _price */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8310:8317  _sender */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8319:8326  _volume */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8294:8327  return (_price, _sender, _volume) */
      swap6
      pop
      swap6
      pop
      swap6
      pop
      pop
      pop
      pop
      jump(tag_72)
        /* "contracts/queue/HeapDynamicArray.sol":8078:8338  if (sellList.length == 1) {... */
    tag_74:
        /* "contracts/queue/HeapDynamicArray.sol":8348:8362  uint256 _price */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8365:8373  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8374:8375  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8365:8376  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_83
      jumpi
      invalid
    tag_83:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8365:8382  sellList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":8348:8382  uint256 _price = sellList[0].Price */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8392:8407  address _sender */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8410:8418  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8419:8420  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8410:8421  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_85
      jumpi
      invalid
    tag_85:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8410:8428  sellList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":8392:8428  address _sender = sellList[0].Sender */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8438:8453  uint256 _volume */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8456:8464  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8465:8466  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8456:8467  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_87
      jumpi
      invalid
    tag_87:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8456:8474  sellList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":8438:8474  uint256 _volume = sellList[0].Volume */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8583:8591  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8610:8611  1 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":8592:8600  sellList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":8592:8607  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8592:8611  sellList.length - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":8583:8612  sellList[sellList.length - 1] */
      dup2
      sload
      dup2
      lt
      tag_89
      jumpi
      invalid
    tag_89:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8569:8577  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8578:8579  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":8569:8580  sellList[0] */
      dup2
      sload
      dup2
      lt
      tag_91
      jumpi
      invalid
    tag_91:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":8569:8612  sellList[0] = sellList[sellList.length - 1] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8622:8630  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":8622:8636  sellList.pop() */
      dup1
      sload
      dup1
      tag_93
      jumpi
      invalid
    tag_93:
      0x01
      swap1
      sub
      dup2
      dup2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      dup1
      dup3
      add
      exp(0x0100, 0x00)
      dup2
      sload
      swap1
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      sstore
      0x01
      dup3
      add
      0x00
      swap1
      sstore
      0x02
      dup3
      add
      0x00
      swap1
      sstore
      0x03
      dup3
      add
      0x00
      swap1
      sstore
      pop
      pop
      swap1
      sstore
        /* "contracts/queue/HeapDynamicArray.sol":8646:8666  minheapHeapifyDown() */
      tag_95
        /* "contracts/queue/HeapDynamicArray.sol":8646:8664  minheapHeapifyDown */
      tag_96
        /* "contracts/queue/HeapDynamicArray.sol":8646:8666  minheapHeapifyDown() */
      jump	// in
    tag_95:
      pop
        /* "contracts/queue/HeapDynamicArray.sol":8684:8690  _price */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8692:8699  _sender */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8701:8708  _volume */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":8676:8709  return (_price, _sender, _volume) */
      swap6
      pop
      swap6
      pop
      swap6
      pop
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7826:8716  function sellListMaxDelete()... */
    tag_72:
      swap1
      swap2
      swap3
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":3708:4042  function buyListMax()... */
    tag_24:
        /* "contracts/queue/HeapDynamicArray.sol":3790:3797  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3811:3818  address */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3832:3839  uint256 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3890:3891  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3872:3879  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3872:3886  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3872:3891  buyList.length != 0 */
      eq
      iszero
        /* "contracts/queue/HeapDynamicArray.sol":3864:3913  require(buyList.length != 0, "buyList is empty!") */
      tag_98
      jumpi
      mload(0x40)
      0x08c379a000000000000000000000000000000000000000000000000000000000
      dup2
      mstore
      0x04
      add
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      0x11
      dup2
      mstore
      0x20
      add
      dup1
      0x6275794c69737420697320656d70747921000000000000000000000000000000
      dup2
      mstore
      pop
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      revert
    tag_98:
        /* "contracts/queue/HeapDynamicArray.sol":3980:3987  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":3988:3989  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3980:3990  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_99
      jumpi
      invalid
    tag_99:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3980:3996  buyList[0].Price */
      0x01
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":3998:4005  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4006:4007  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":3998:4008  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_101
      jumpi
      invalid
    tag_101:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":3998:4015  buyList[0].Sender */
      0x00
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "contracts/queue/HeapDynamicArray.sol":4017:4024  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4025:4026  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":4017:4027  buyList[0] */
      dup2
      sload
      dup2
      lt
      tag_103
      jumpi
      invalid
    tag_103:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":4017:4034  buyList[0].Volume */
      0x02
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":3972:4035  return (buyList[0].Price, buyList[0].Sender, buyList[0].Volume) */
      swap3
      pop
      swap3
      pop
      swap3
      pop
        /* "contracts/queue/HeapDynamicArray.sol":3708:4042  function buyListMax()... */
      swap1
      swap2
      swap3
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":6044:6339  function insertAsk(... */
    tag_27:
        /* "contracts/queue/HeapDynamicArray.sol":6185:6212  OrderStruct memory neworder */
      tag_106
      tag_60
      jump	// in
    tag_106:
        /* "contracts/queue/HeapDynamicArray.sol":6227:6271  OrderStruct(sender, price, volume, auxprice) */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":6239:6245  sender */
      dup7
        /* "contracts/queue/HeapDynamicArray.sol":6227:6271  OrderStruct(sender, price, volume, auxprice) */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":6247:6252  price */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":6227:6271  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":6254:6260  volume */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":6227:6271  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      0x20
      add
        /* "contracts/queue/HeapDynamicArray.sol":6262:6270  auxprice */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":6227:6271  OrderStruct(sender, price, volume, auxprice) */
      dup2
      mstore
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6185:6271  OrderStruct memory neworder =... */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6281:6289  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":6295:6303  neworder */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":6281:6304  sellList.push(neworder) */
      swap1
      dup1
        /* "--CODEGEN--":39:40   */
      0x01
        /* "--CODEGEN--":33:36   */
      dup2
        /* "--CODEGEN--":27:37   */
      sload
        /* "--CODEGEN--":23:41   */
      add
        /* "--CODEGEN--":57:67   */
      dup1
        /* "--CODEGEN--":52:55   */
      dup3
        /* "--CODEGEN--":45:68   */
      sstore
        /* "--CODEGEN--":79:89   */
      dup1
        /* "--CODEGEN--":72:89   */
      swap2
      pop
        /* "--CODEGEN--":0:93   */
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6281:6304  sellList.push(neworder) */
      swap1
      0x01
      dup3
      sub
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
      0x00
      swap1
      swap2
      swap3
      swap1
      swap2
      swap1
      swap2
      pop
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6314:6332  minheapHeapifyUp() */
      tag_108
        /* "contracts/queue/HeapDynamicArray.sol":6314:6330  minheapHeapifyUp */
      tag_109
        /* "contracts/queue/HeapDynamicArray.sol":6314:6332  minheapHeapifyUp() */
      jump	// in
    tag_108:
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6044:6339  function insertAsk(... */
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":11086:11263  function sellListisEmpty() external view returns (bool) {... */
    tag_29:
        /* "contracts/queue/HeapDynamicArray.sol":11136:11140  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":11175:11176  0 */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":11156:11164  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":11156:11171  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":11156:11176  sellList.length == 0 */
      eq
        /* "contracts/queue/HeapDynamicArray.sol":11152:11257  if (sellList.length == 0) {... */
      iszero
      tag_111
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":11199:11203  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":11192:11203  return true */
      swap1
      pop
      jump(tag_110)
        /* "contracts/queue/HeapDynamicArray.sol":11152:11257  if (sellList.length == 0) {... */
    tag_111:
        /* "contracts/queue/HeapDynamicArray.sol":11241:11246  false */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":11234:11246  return false */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":11086:11263  function sellListisEmpty() external view returns (bool) {... */
    tag_110:
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":4131:5592  function maxheapHeapifyDown() internal returns (bool) {... */
    tag_54:
        /* "contracts/queue/HeapDynamicArray.sol":4179:4183  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4195:4204  uint256 k */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":4207:4208  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4195:4208  uint256 k = 0 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4218:4235  uint256 leftchild */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4246:4247  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":4242:4243  k */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":4238:4239  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":4238:4243  2 * k */
      mul
        /* "contracts/queue/HeapDynamicArray.sol":4238:4247  2 * k + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":4218:4247  uint256 leftchild = 2 * k + 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4337:5565  while (leftchild < buyList.length) {... */
    tag_114:
        /* "contracts/queue/HeapDynamicArray.sol":4356:4363  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4356:4370  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4344:4353  leftchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":4344:4370  leftchild < buyList.length */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":4337:5565  while (leftchild < buyList.length) {... */
      iszero
      tag_115
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":4386:4397  uint256 max */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4400:4409  leftchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":4386:4409  uint256 max = leftchild */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4455:4473  uint256 rightchild */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4488:4489  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":4476:4485  leftchild */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":4476:4489  leftchild + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":4455:4489  uint256 rightchild = leftchild + 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4559:4566  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4559:4573  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4546:4556  rightchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":4546:4573  rightchild < buyList.length */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":4542:4916  if (rightchild < buyList.length) {... */
      iszero
      tag_116
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":4716:4723  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4724:4733  leftchild */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":4716:4734  buyList[leftchild] */
      dup2
      sload
      dup2
      lt
      tag_117
      jumpi
      invalid
    tag_117:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":4716:4743  buyList[leftchild].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":4685:4692  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":4693:4703  rightchild */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":4685:4704  buyList[rightchild] */
      dup2
      sload
      dup2
      lt
      tag_119
      jumpi
      invalid
    tag_119:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":4685:4713  buyList[rightchild].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":4685:4743  buyList[rightchild].AuxPrice > buyList[leftchild].AuxPrice */
      gt
        /* "contracts/queue/HeapDynamicArray.sol":4660:4902  if (... */
      iszero
      tag_121
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":4878:4883  max++ */
      dup2
      dup1
      0x01
      add
      swap3
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4660:4902  if (... */
    tag_121:
        /* "contracts/queue/HeapDynamicArray.sol":4542:4916  if (rightchild < buyList.length) {... */
    tag_116:
        /* "contracts/queue/HeapDynamicArray.sol":5071:5078  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5079:5082  max */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":5071:5083  buyList[max] */
      dup2
      sload
      dup2
      lt
      tag_122
      jumpi
      invalid
    tag_122:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5071:5092  buyList[max].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":5049:5056  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5057:5058  k */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":5049:5059  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_124
      jumpi
      invalid
    tag_124:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5049:5068  buyList[k].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":5049:5092  buyList[k].AuxPrice < buyList[max].AuxPrice */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":5045:5555  if (buyList[k].AuxPrice < buyList[max].AuxPrice) {... */
      iszero
      tag_126
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":5112:5135  OrderStruct memory temp */
      tag_127
      tag_60
      jump	// in
    tag_127:
        /* "contracts/queue/HeapDynamicArray.sol":5138:5145  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5146:5147  k */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":5138:5148  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_128
      jumpi
      invalid
    tag_128:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5112:5148  OrderStruct memory temp = buyList[k] */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      swap1
      dup2
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      0x01
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x02
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x03
      dup3
      add
      sload
      dup2
      mstore
      pop
      pop
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5179:5186  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5187:5190  max */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":5179:5191  buyList[max] */
      dup2
      sload
      dup2
      lt
      tag_130
      jumpi
      invalid
    tag_130:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5166:5173  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5174:5175  k */
      dup7
        /* "contracts/queue/HeapDynamicArray.sol":5166:5176  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_132
      jumpi
      invalid
    tag_132:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5166:5191  buyList[k] = buyList[max] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5224:5228  temp */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":5209:5216  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":5217:5220  max */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":5209:5221  buyList[max] */
      dup2
      sload
      dup2
      lt
      tag_134
      jumpi
      invalid
    tag_134:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":5209:5228  buyList[max] = temp */
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5284:5287  max */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":5280:5287  k = max */
      swap5
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5405:5406  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":5401:5402  k */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":5397:5398  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":5397:5402  2 * k */
      mul
        /* "contracts/queue/HeapDynamicArray.sol":5397:5406  2 * k + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":5385:5406  leftchild = 2 * k + 1 */
      swap4
      pop
        /* "contracts/queue/HeapDynamicArray.sol":5045:5555  if (buyList[k].AuxPrice < buyList[max].AuxPrice) {... */
      pop
      jump(tag_136)
    tag_126:
        /* "contracts/queue/HeapDynamicArray.sol":5535:5540  break */
      pop
      pop
      jump(tag_115)
        /* "contracts/queue/HeapDynamicArray.sol":5045:5555  if (buyList[k].AuxPrice < buyList[max].AuxPrice) {... */
    tag_136:
        /* "contracts/queue/HeapDynamicArray.sol":4337:5565  while (leftchild < buyList.length) {... */
      pop
      pop
      jump(tag_114)
    tag_115:
        /* "contracts/queue/HeapDynamicArray.sol":5581:5585  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":5574:5585  return true */
      swap3
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":4131:5592  function maxheapHeapifyDown() internal returns (bool) {... */
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":1459:2498  function maxheapHeapifyUp() internal returns (bool) {... */
    tag_63:
        /* "contracts/queue/HeapDynamicArray.sol":1505:1509  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1659:1668  uint256 k */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":1688:1689  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":1671:1678  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1671:1685  buyList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1671:1689  buyList.length - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":1659:1689  uint256 k = buyList.length - 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1757:2471  while (k > 0) {... */
    tag_138:
        /* "contracts/queue/HeapDynamicArray.sol":1768:1769  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1764:1765  k */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":1764:1769  k > 0 */
      gt
        /* "contracts/queue/HeapDynamicArray.sol":1757:2471  while (k > 0) {... */
      iszero
      tag_139
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":1860:1869  uint256 p */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1882:1883  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":1877:1878  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":1873:1874  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":1873:1878  k - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":1872:1883  (k - 1) / 2 */
      dup2
      tag_140
      jumpi
      invalid
    tag_140:
      div
        /* "contracts/queue/HeapDynamicArray.sol":1860:1883  uint256 p = (k - 1) / 2 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1995:2002  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2003:2004  p */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":1995:2005  buyList[p] */
      dup2
      sload
      dup2
      lt
      tag_141
      jumpi
      invalid
    tag_141:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":1995:2014  buyList[p].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":1973:1980  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":1981:1982  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":1973:1983  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_143
      jumpi
      invalid
    tag_143:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":1973:1992  buyList[k].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":1973:2014  buyList[k].AuxPrice > buyList[p].AuxPrice */
      gt
        /* "contracts/queue/HeapDynamicArray.sol":1969:2461  if (buyList[k].AuxPrice > buyList[p].AuxPrice) {... */
      iszero
      tag_145
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":2096:2119  OrderStruct memory temp */
      tag_146
      tag_60
      jump	// in
    tag_146:
        /* "contracts/queue/HeapDynamicArray.sol":2122:2129  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2130:2131  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":2122:2132  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_147
      jumpi
      invalid
    tag_147:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":2096:2132  OrderStruct memory temp = buyList[k] */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      swap1
      dup2
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      0x01
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x02
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x03
      dup3
      add
      sload
      dup2
      mstore
      pop
      pop
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2163:2170  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2171:2172  p */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":2163:2173  buyList[p] */
      dup2
      sload
      dup2
      lt
      tag_149
      jumpi
      invalid
    tag_149:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":2150:2157  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2158:2159  k */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":2150:2160  buyList[k] */
      dup2
      sload
      dup2
      lt
      tag_151
      jumpi
      invalid
    tag_151:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":2150:2173  buyList[k] = buyList[p] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2204:2208  temp */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":2191:2198  buyList */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":2199:2200  p */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":2191:2201  buyList[p] */
      dup2
      sload
      dup2
      lt
      tag_153
      jumpi
      invalid
    tag_153:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":2191:2208  buyList[p] = temp */
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":2269:2270  p */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":2265:2270  k = p */
      swap3
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1969:2461  if (buyList[k].AuxPrice > buyList[p].AuxPrice) {... */
      pop
      jump(tag_155)
    tag_145:
        /* "contracts/queue/HeapDynamicArray.sol":2441:2446  break */
      pop
      jump(tag_139)
        /* "contracts/queue/HeapDynamicArray.sol":1969:2461  if (buyList[k].AuxPrice > buyList[p].AuxPrice) {... */
    tag_155:
        /* "contracts/queue/HeapDynamicArray.sol":1757:2471  while (k > 0) {... */
      pop
      jump(tag_138)
    tag_139:
        /* "contracts/queue/HeapDynamicArray.sol":2487:2491  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":2480:2491  return true */
      swap2
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":1459:2498  function maxheapHeapifyUp() internal returns (bool) {... */
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":9421:10930  function minheapHeapifyDown() internal returns (bool) {... */
    tag_96:
        /* "contracts/queue/HeapDynamicArray.sol":9469:9473  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9485:9494  uint256 k */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":9497:9498  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9485:9498  uint256 k = 0 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9508:9525  uint256 leftchild */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9536:9537  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9532:9533  k */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":9528:9529  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":9528:9533  2 * k */
      mul
        /* "contracts/queue/HeapDynamicArray.sol":9528:9537  2 * k + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":9508:9537  uint256 leftchild = 2 * k + 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9626:10903  while (leftchild < sellList.length) {... */
    tag_157:
        /* "contracts/queue/HeapDynamicArray.sol":9645:9653  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9645:9660  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9633:9642  leftchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":9633:9660  leftchild < sellList.length */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":9626:10903  while (leftchild < sellList.length) {... */
      iszero
      tag_158
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":9676:9687  uint256 min */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9690:9699  leftchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":9676:9699  uint256 min = leftchild */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9745:9763  uint256 rightchild */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":9778:9779  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9766:9775  leftchild */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":9766:9779  leftchild + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":9745:9779  uint256 rightchild = leftchild + 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9900:9908  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9900:9915  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9887:9897  rightchild */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":9887:9915  rightchild < sellList.length */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":9883:10193  if (rightchild < sellList.length) {... */
      iszero
      tag_159
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":9992:10000  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10001:10010  leftchild */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":9992:10011  sellList[leftchild] */
      dup2
      sload
      dup2
      lt
      tag_160
      jumpi
      invalid
    tag_160:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":9992:10020  sellList[leftchild].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":9960:9968  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":9969:9979  rightchild */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":9960:9980  sellList[rightchild] */
      dup2
      sload
      dup2
      lt
      tag_162
      jumpi
      invalid
    tag_162:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":9960:9989  sellList[rightchild].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":9960:10020  sellList[rightchild].AuxPrice < sellList[leftchild].AuxPrice */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":9935:10179  if (... */
      iszero
      tag_164
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":10155:10160  min++ */
      dup2
      dup1
      0x01
      add
      swap3
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9935:10179  if (... */
    tag_164:
        /* "contracts/queue/HeapDynamicArray.sol":9883:10193  if (rightchild < sellList.length) {... */
    tag_159:
        /* "contracts/queue/HeapDynamicArray.sol":10320:10328  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10329:10330  k */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":10320:10331  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_165
      jumpi
      invalid
    tag_165:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10320:10340  sellList[k].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":10295:10303  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10304:10307  min */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":10295:10308  sellList[min] */
      dup2
      sload
      dup2
      lt
      tag_167
      jumpi
      invalid
    tag_167:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10295:10317  sellList[min].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":10295:10340  sellList[min].AuxPrice < sellList[k].AuxPrice */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":10291:10893  if (sellList[min].AuxPrice < sellList[k].AuxPrice) {... */
      iszero
      tag_169
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":10422:10445  OrderStruct memory temp */
      tag_170
      tag_60
      jump	// in
    tag_170:
        /* "contracts/queue/HeapDynamicArray.sol":10448:10456  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10457:10458  k */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":10448:10459  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_171
      jumpi
      invalid
    tag_171:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10422:10459  OrderStruct memory temp = sellList[k] */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      swap1
      dup2
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      0x01
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x02
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x03
      dup3
      add
      sload
      dup2
      mstore
      pop
      pop
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":10491:10499  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10500:10503  min */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":10491:10504  sellList[min] */
      dup2
      sload
      dup2
      lt
      tag_173
      jumpi
      invalid
    tag_173:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10477:10485  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10486:10487  k */
      dup7
        /* "contracts/queue/HeapDynamicArray.sol":10477:10488  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_175
      jumpi
      invalid
    tag_175:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10477:10504  sellList[k] = sellList[min] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":10538:10542  temp */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":10522:10530  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10531:10534  min */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":10522:10535  sellList[min] */
      dup2
      sload
      dup2
      lt
      tag_177
      jumpi
      invalid
    tag_177:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":10522:10542  sellList[min] = temp */
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":10599:10602  min */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":10595:10602  k = min */
      swap5
      pop
        /* "contracts/queue/HeapDynamicArray.sol":10720:10721  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10716:10717  k */
      dup6
        /* "contracts/queue/HeapDynamicArray.sol":10712:10713  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":10712:10717  2 * k */
      mul
        /* "contracts/queue/HeapDynamicArray.sol":10712:10721  2 * k + 1 */
      add
        /* "contracts/queue/HeapDynamicArray.sol":10700:10721  leftchild = 2 * k + 1 */
      swap4
      pop
        /* "contracts/queue/HeapDynamicArray.sol":10291:10893  if (sellList[min].AuxPrice < sellList[k].AuxPrice) {... */
      pop
      jump(tag_179)
    tag_169:
        /* "contracts/queue/HeapDynamicArray.sol":10873:10878  break */
      pop
      pop
      jump(tag_158)
        /* "contracts/queue/HeapDynamicArray.sol":10291:10893  if (sellList[min].AuxPrice < sellList[k].AuxPrice) {... */
    tag_179:
        /* "contracts/queue/HeapDynamicArray.sol":9626:10903  while (leftchild < sellList.length) {... */
      pop
      pop
      jump(tag_157)
    tag_158:
        /* "contracts/queue/HeapDynamicArray.sol":10919:10923  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":10912:10923  return true */
      swap3
      pop
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":9421:10930  function minheapHeapifyDown() internal returns (bool) {... */
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":6471:7517  function minheapHeapifyUp() internal returns (bool) {... */
    tag_109:
        /* "contracts/queue/HeapDynamicArray.sol":6517:6521  bool */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":6672:6681  uint256 k */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":6702:6703  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":6684:6692  sellList */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":6684:6699  sellList.length */
      dup1
      sload
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6684:6703  sellList.length - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":6672:6703  uint256 k = sellList.length - 1 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6770:7489  while (k > 0) {... */
    tag_181:
        /* "contracts/queue/HeapDynamicArray.sol":6781:6782  0 */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":6777:6778  k */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":6777:6782  k > 0 */
      gt
        /* "contracts/queue/HeapDynamicArray.sol":6770:7489  while (k > 0) {... */
      iszero
      tag_182
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":6884:6893  uint256 p */
      0x00
        /* "contracts/queue/HeapDynamicArray.sol":6906:6907  2 */
      0x02
        /* "contracts/queue/HeapDynamicArray.sol":6901:6902  1 */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":6897:6898  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":6897:6902  k - 1 */
      sub
        /* "contracts/queue/HeapDynamicArray.sol":6896:6907  (k - 1) / 2 */
      dup2
      tag_183
      jumpi
      invalid
    tag_183:
      div
        /* "contracts/queue/HeapDynamicArray.sol":6884:6907  uint256 p = (k - 1) / 2 */
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7004:7012  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7013:7014  p */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":7004:7015  sellList[p] */
      dup2
      sload
      dup2
      lt
      tag_184
      jumpi
      invalid
    tag_184:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":7004:7024  sellList[p].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":6981:6989  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":6990:6991  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":6981:6992  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_186
      jumpi
      invalid
    tag_186:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":6981:7001  sellList[k].AuxPrice */
      0x03
      add
      sload
        /* "contracts/queue/HeapDynamicArray.sol":6981:7024  sellList[k].AuxPrice < sellList[p].AuxPrice */
      lt
        /* "contracts/queue/HeapDynamicArray.sol":6977:7479  if (sellList[k].AuxPrice < sellList[p].AuxPrice) {... */
      iszero
      tag_188
      jumpi
        /* "contracts/queue/HeapDynamicArray.sol":7106:7129  OrderStruct memory temp */
      tag_189
      tag_60
      jump	// in
    tag_189:
        /* "contracts/queue/HeapDynamicArray.sol":7132:7140  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7141:7142  k */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":7132:7143  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_190
      jumpi
      invalid
    tag_190:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":7106:7143  OrderStruct memory temp = sellList[k] */
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      swap1
      dup2
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      0x01
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x02
      dup3
      add
      sload
      dup2
      mstore
      0x20
      add
      0x03
      dup3
      add
      sload
      dup2
      mstore
      pop
      pop
      swap1
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7175:7183  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7184:7185  p */
      dup3
        /* "contracts/queue/HeapDynamicArray.sol":7175:7186  sellList[p] */
      dup2
      sload
      dup2
      lt
      tag_192
      jumpi
      invalid
    tag_192:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":7161:7169  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7170:7171  k */
      dup5
        /* "contracts/queue/HeapDynamicArray.sol":7161:7172  sellList[k] */
      dup2
      sload
      dup2
      lt
      tag_194
      jumpi
      invalid
    tag_194:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":7161:7186  sellList[k] = sellList[p] */
      0x00
      dup3
      add
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x01
      dup3
      add
      sload
      dup2
      0x01
      add
      sstore
      0x02
      dup3
      add
      sload
      dup2
      0x02
      add
      sstore
      0x03
      dup3
      add
      sload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7218:7222  temp */
      dup1
        /* "contracts/queue/HeapDynamicArray.sol":7204:7212  sellList */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7213:7214  p */
      dup4
        /* "contracts/queue/HeapDynamicArray.sol":7204:7215  sellList[p] */
      dup2
      sload
      dup2
      lt
      tag_196
      jumpi
      invalid
    tag_196:
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x04
      mul
      add
        /* "contracts/queue/HeapDynamicArray.sol":7204:7222  sellList[p] = temp */
      0x00
      dup3
      add
      mload
      dup2
      0x00
      add
      exp(0x0100, 0x00)
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
      0x20
      dup3
      add
      mload
      dup2
      0x01
      add
      sstore
      0x40
      dup3
      add
      mload
      dup2
      0x02
      add
      sstore
      0x60
      dup3
      add
      mload
      dup2
      0x03
      add
      sstore
      swap1
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":7283:7284  p */
      dup2
        /* "contracts/queue/HeapDynamicArray.sol":7279:7284  k = p */
      swap3
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6977:7479  if (sellList[k].AuxPrice < sellList[p].AuxPrice) {... */
      pop
      jump(tag_198)
    tag_188:
        /* "contracts/queue/HeapDynamicArray.sol":7459:7464  break */
      pop
      jump(tag_182)
        /* "contracts/queue/HeapDynamicArray.sol":6977:7479  if (sellList[k].AuxPrice < sellList[p].AuxPrice) {... */
    tag_198:
        /* "contracts/queue/HeapDynamicArray.sol":6770:7489  while (k > 0) {... */
      pop
      jump(tag_181)
    tag_182:
        /* "contracts/queue/HeapDynamicArray.sol":7506:7510  true */
      0x01
        /* "contracts/queue/HeapDynamicArray.sol":7499:7510  return true */
      swap2
      pop
      pop
        /* "contracts/queue/HeapDynamicArray.sol":6471:7517  function minheapHeapifyUp() internal returns (bool) {... */
      swap1
      jump	// out
        /* "contracts/queue/HeapDynamicArray.sol":167:11265  contract HeapDynamicArray {... */
    tag_60:
      mload(0x40)
      dup1
      0x80
      add
      0x40
      mstore
      dup1
      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)
      dup2
      mstore
      0x20
      add
      0x00
      dup2
      mstore
      0x20
      add
      0x00
      dup2
      mstore
      0x20
      add
      0x00
      dup2
      mstore
      pop
      swap1
      jump	// out

    auxdata: 0xa265627a7a72315820a45ef74d0670733c4ced7f6e7494089b00e33f7f2c91c95f01fb8bc0a6a9a35864736f6c63430005110032
}
